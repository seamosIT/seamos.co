require 'rails_helper'
include SessionsHelper

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InterestsController, type: :controller do
  describe 'GET index' do
    let(:user) { FactoryGirl.create(:user) }
    context 'when the request format is JSON' do
      it 'assigns @interests' do
        5.times { FactoryGirl.create(:interest) }
        all_interests = Interest.all
        get :index, params: { user_id: user.id}
        expect(assigns(:interests)).to eq(all_interests)
      end
    end
  end

  # describe "GET #index" do
  #   it "assigns all interests as @interests" do
  #     user = FactoryGirl.create(:user)
  #     interest = Interest.create! valid_attributes
  #     get "#{url_user_prefix}/#{user.id}/interests" => 'interest#index', format: :json
  #     expect(assigns(:interests)).to eq([interest])
  #   end
  # end
  # describe "GET #show" do
  #   it "assigns the requested interest as @interest" do
  #     interest = Interest.create! valid_attributes
  #     get '#{url_user_prefix}/#{user.id}/interest' => 'interest#index'
  #     get :show, params: {id: interest.to_param}
  #     expect(assigns(:interest)).to eq(interest)
  #   end
  # end


  # describe "GET #edit" do
  #   it "assigns the requested interest as @interest" do
  #     interest = Interest.create! valid_attributes
  #     get :edit, params: {id: interest.to_param}, session: valid_session
  #     expect(assigns(:interest)).to eq(interest)
  #   end
  # end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new Interest" do
  #       expect {
  #         post :create, params: {interest: valid_attributes}, session: valid_session
  #       }.to change(Interest, :count).by(1)
  #     end

  #     it "assigns a newly created interest as @interest" do
  #       post :create, params: {interest: valid_attributes}, session: valid_session
  #       expect(assigns(:interest)).to be_a(Interest)
  #       expect(assigns(:interest)).to be_persisted
  #     end

  #     it "redirects to the created interest" do
  #       post :create, params: {interest: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to(Interest.last)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns a newly created but unsaved interest as @interest" do
  #       post :create, params: {interest: invalid_attributes}, session: valid_session
  #       expect(assigns(:interest)).to be_a_new(Interest)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, params: {interest: invalid_attributes}, session: valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested interest" do
  #       interest = Interest.create! valid_attributes
  #       put :update, params: {id: interest.to_param, interest: new_attributes}, session: valid_session
  #       interest.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested interest as @interest" do
  #       interest = Interest.create! valid_attributes
  #       put :update, params: {id: interest.to_param, interest: valid_attributes}, session: valid_session
  #       expect(assigns(:interest)).to eq(interest)
  #     end

  #     it "redirects to the interest" do
  #       interest = Interest.create! valid_attributes
  #       put :update, params: {id: interest.to_param, interest: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to(interest)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the interest as @interest" do
  #       interest = Interest.create! valid_attributes
  #       put :update, params: {id: interest.to_param, interest: invalid_attributes}, session: valid_session
  #       expect(assigns(:interest)).to eq(interest)
  #     end

  #     it "re-renders the 'edit' template" do
  #       interest = Interest.create! valid_attributes
  #       put :update, params: {id: interest.to_param, interest: invalid_attributes}, session: valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE #destroy" do
  #   it "destroys the requested interest" do
  #     interest = Interest.create! valid_attributes
  #     expect {
  #       delete :destroy, params: {id: interest.to_param}, session: valid_session
  #     }.to change(Interest, :count).by(-1)
  #   end

  #   it "redirects to the interests list" do
  #     interest = Interest.create! valid_attributes
  #     delete :destroy, params: {id: interest.to_param}, session: valid_session
  #     expect(response).to redirect_to(interests_url)
  #   end
  # end

end
